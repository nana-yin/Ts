{
  // 常规属性
  // tsconfig.json文件是ts编译器的配置文件，ts编译器可以根据这里面的配置进行代码的编译。
  /* 
    1、include 定义当前需要编译的文件
      注意：
         ** 表示任意目录
         *  表示任意文件
    2、exclude 定义当前无需编译的文件
      默认值：["node_modules", "bower_components", "jspm_packages"]
    3、extends 定义需要继承的配置文件
    4、files 定义被编译文件的列表
  */
  "include": [
    "./src/**/*"
  ],
  // "exclude": [],
  /* 
    compilerOptions 编译器选项配置
  */
  "compilerOptions": {
    // target 用来指定ts被编译为哪个版本的js
    // esnext 表示编译为最新版本的js
    // 'es3', 'es5', 'es6', 'es2015', 'es2016', 'es2017', 'es2018', 'es2019', 'es2020', 'es2021', 'esnext'
    "target": "es2015",
    // module 指定要使用的模块化的版本
    // 'none', 'commonjs', 'amd', 'system', 'umd', 'es6', 'es2015', 'es2020', 'es2022', 'esnext', 'node12', 'nodenext'
    "module": "system",
    // lib 用来指定项目中使用的库，一般在浏览器中运行时不改。
    /* 
      'es5', 'es6', 'es2015', 'es7', 'es2016', 'es2017', 'es2018', 'es2019', 'es2020', 'es2021', 'esnext', 'dom', 'dom.iterable', 'webworker', 'webworker.importscripts', 'webworker.iterable', 'scripthost', 'es2015.core', 'es2015.collection', 'es2015.generator', 'es2015.iterable', 'es2015.promise', 'es2015.proxy', 'es2015.reflect', 'es2015.symbol', 'es2015.symbol.wellknown', 'es2016.array.include', 'es2017.object', 'es2017.sharedmemory', 'es2017.string', 'es2017.intl', 'es2017.typedarrays', 'es2018.asyncgenerator', 'es2018.asynciterable', 'es2018.intl', 'es2018.promise', 'es2018.regexp', 'es2019.array', 'es2019.object', 'es2019.string', 
      'es2019.symbol', 'es2020.bigint', 'es2020.promise', 'es2020.sharedmemory', 'es2020.string', 'es2020.symbol.wellknown', 
      'es2020.intl', 'es2021.promise', 'es2021.string', 'es2021.weakref', 'es2021.intl', 'esnext.array', 'esnext.symbol', 'esnext.asynciterable', 'esnext.intl', 'esnext.bigint', 'esnext.string', 'esnext.promise', 'esnext.weakref'
    */
    // "lib": ["dom"],
    // outDir 用来指定编译后的文件所在的目录
    "outDir": "./dist",
    // outFile 用来将所有的编译的代码合并为一个文件
    // "outFile": "./dist/app.js"

    // allowJs 是否允许将js文件进行编译，默认false
    "allowJs": true,
    // checkJs 是否检查js代码是否符合语法检查，默认false
    "checkJs": true,
    // removeComments 是否移除代码中的注释，默认false
    "removeComments": true,
    // noEmit 不生成编译后的文件，默认false
    "noEmit": false,
    // noEmitOnError 当编译中的文件报错的时候，不生成编译后的文件，默认false
    "noEmitOnError": true,


    // 语法检查相关的属性
    // 所有的严格检查的总开关，建议设置为true
    "strict": true,
    // 用来设置编译后的文件是否开启严格模式，默认false
    "alwaysStrict": false,
    // 不允许隐式的any类型
    "noImplicitAny": false,
    // 不允许不明类型的this
    "noImplicitThis": true,
    // 严格的检查空值
    "strictNullChecks": true
  }
}